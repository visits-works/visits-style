{"data":{"site":{"siteMetadata":{"title":"visits-style","docsLocation":"https://github.com/visits-works/visits-style/tree/develop/docs/content","description":"react style guide for VISITS Technologies"}},"mdx":{"frontmatter":{"title":"Core","description":"デザインシステムに必ず必要なこと"},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `このプロジェクトは`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/styled-components/styled-components\"\n    }\n  }, `styled-components`), `\nの`, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `theme`), `機能を使っています`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `横の`, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `theme`), `メニューの色は必須として必要なので、カスタムが必要になったら変更してください。`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metaString\": \"\"\n    }\n  }, `import { ThemeProvider } from 'styled-components';\nimport theme from 'visits-style/theme/light';\n\ndefault function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button>button</Button>\n    </ThemeProvider>\n  );\n}\n`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `グローバルCSSの定義`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `以下の定義方法として、対応してください。`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-jsx\",\n      \"metaString\": \"\"\n    }\n  }, `import React, { Fragment } from 'react';\n// デフォルトグローバル定義のcss\nimport normalize from 'visits-style/stlyes/normalize';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle\\`\n  \\${normalize}\n  html, body {\n    height: 100%;\n  }\n\n  // ... その他のグローバルcss\n\\`;\n\n\ndefault function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Fragment>\n        <GlobalStyle />\n        <Button>button</Button>\n      </Fragment>\n    </ThemeProvider>\n  );\n}\n`)));\n});"},"tableOfContents":{"items":[{"url":"#グローバルcssの定義","title":"グローバルCSSの定義"}]},"parent":{"__typename":"File","relativePath":"core/index.mdx"}}},"pageContext":{"id":"002ba7da-47b5-5fa9-a62a-0cc445270f58"}}