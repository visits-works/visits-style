{"componentChunkName":"component---src-docs-tsx","path":"/components/toast","webpackCompilationHash":"f0752590c556a6ad4745","result":{"data":{"site":{"siteMetadata":{"title":"visits-style","docsLocation":"https://github.com/visits-works/visits-style/tree/develop/docs/content","description":"react style guide for VISITS Technologies"}},"mdx":{"frontmatter":{"title":"Toast","description":"通知などのためのトーストです"},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Toast\",\n  \"description\": \"通知などのためのトーストです\",\n  \"import\": \"Toast\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Imports\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import { Toast } from 'visits-style';\\n\")), mdx(\"h2\", null, \"Props\"), mdx(\"h3\", null, \"Toasts\\u306E\\u578B\"), mdx(\"h2\", null, \"Demo\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }), \"function ToastDemo() {\\n  const [list, setList] = React.useState([]);\\n  const [position, setPosition] = React.useState('top-left');\\n\\n  const addToast = () => {\\n    const colorList= ['warning', 'danger', 'info', 'primary', 'success'];\\n    const lst = list.slice();\\n    const color = colorList[Math.floor(Math.random() * Math.floor(colorList.length))];\\n    const id = '_' + Math.random().toString(36).substr(2, 9);\\n    if (list.length % 2) {\\n      lst.push({ id: id, color: color, message: <span>{'looooooooooooooooooooooooooooooong list number: ' + lst.length}</span> });\\n    } else {\\n      lst.push({ id: id, color: color, message: 'list number: ' + lst.length });\\n    }\\n    setList(lst);\\n  };\\n\\n  const clearToast = (id) => setList(list.filter(item => item.id !== id));\\n  const clearAll = () => setList([]);\\n  const onSelect = (e) => setPosition(e.target.value);\\n\\n  const positionList = ['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right'];\\n  return (\\n    <div>\\n      <div style={{ width: '150px' }}>\\n        <Select\\n          name=\\\"position\\\"\\n          value={position}\\n          options={positionList}\\n          onChange={onSelect}\\n          outline\\n        />\\n      </div>\\n      <br />\\n      <Button color=\\\"info\\\" onClick={addToast}>Toast!</Button>\\n      <Button color=\\\"danger\\\" onClick={clearAll}>Clear All</Button>\\n      <Toast toasts={list} clear={clearToast} position={position} />\\n    </div>\\n  );\\n}\\n\")));\n}\nMDXContent.isMDXComponent = true;"},"tableOfContents":{"items":[{"url":"#imports","title":"Imports"},{"url":"#props","title":"Props","items":[{"url":"#toastsの型","title":"Toastsの型"}]},{"url":"#demo","title":"Demo"}]},"parent":{"__typename":"File","relativePath":"components/toast.mdx"}},"file":{"fields":{"component":"Toast","meta":[{"props":[{"name":"toasts","description":"表示するToastのリスト","required":true,"type":"ToastProps[]"},{"name":"clear","description":"toastを消すタイミングのコールバック","required":true,"type":"(id: string) => void"},{"name":"position","description":"top, top-right, top-left, bottom, bottom-right, bottom-left","required":false,"type":"PositionType"},{"name":"margin","description":"margin","required":false,"type":"string"},{"name":"fixed","description":"スクロールしても固定として表示する","required":false,"type":"boolean"}]}]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"0788bc18-91d6-5141-87b0-dfa38db5f3bd","import":"Toast"}}}