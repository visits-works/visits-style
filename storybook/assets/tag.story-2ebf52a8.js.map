{"version":3,"file":"tag.story-2ebf52a8.js","sources":["../../src/elements/Tag/index.tsx"],"sourcesContent":["import React, { HTMLAttributes } from 'react';\nimport styled, { css } from 'styled-components';\nimport TextButton from '../Button/TextButton';\nimport Close from '../Icons/Close';\nimport findColorInvert from '../../utils/findColorInvert';\nimport { ColorType, ThemeType } from '../../types';\n\nfunction getColor(theme: ThemeType, color?: ColorType) {\n  return (!color || color === 'light') ? theme.background : theme[color];\n}\n\nconst closeCss = css`\n  padding-right: 1.625rem;\n\n  ${TextButton} {\n    display: flex;\n    position: absolute;\n    align-items: center;\n    color: inherit;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    padding: 0 0.35rem;\n\n    svg {\n      width: 0.625rem;\n      height: 0.625rem;\n    }\n\n    &:hover {\n      background-color: rgba(0,0,0,0.15);\n    }\n  }\n`;\n\nconst Wrapper = styled.div<Pick<Props, 'color'|'round'> & { close: boolean; }>`\n  display: inline-flex;\n  position: relative;\n  font-size: 0.75rem;\n  cursor: default;\n  padding: 0.325rem 0.5rem;\n  align-items: center;\n  justify-content: center;\n  height: 1.5rem;\n  border-radius: ${({ theme, round }) => (round ? '50rem' : theme.radius)};\n  white-space: nowrap;\n\n  ${({ color, theme }) => {\n    const target = getColor(theme, color);\n    const invertColor = findColorInvert(theme, target);\n\n    return css`\n      color: ${invertColor};\n      background-color: ${target};\n\n      a, span {\n        color: ${invertColor};\n      }\n    `;\n  }}\n\n  &:not(:last-child) {\n    margin-right: 0.5rem;\n  }\n\n  ${TextButton} {\n    border-radius: 0;\n    border-top-right-radius: ${({ theme, round }) => (round ? '50rem' : theme.radius)};\n    border-bottom-right-radius: ${({ theme, round }) => (round ? '50rem' : theme.radius)};\n  }\n\n  ${({ close }) => (close ? closeCss : undefined)}\n`;\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  /** タグの内容 */\n  children: any;\n  /** Xボタンの追加＋クリック時のイベントハンドラー */\n  onClose?: () => void;\n  /** クリック時のイベントハンドラー */\n  onClick?: () => void;\n  /** 色の指定 */\n  color?: ColorType;\n  /** 丸くする */\n  round?: boolean;\n}\n\nexport default function Tag({ children, onClose, ...rest }: Props) {\n  return (\n    <Wrapper close={!!onClose} {...rest}>\n      {children}\n      {onClose && (<TextButton onClick={onClose} pure><Close /></TextButton>)}\n    </Wrapper>\n  );\n}\n"],"names":["getColor","theme","color","closeCss","css","TextButton","Wrapper","styled","round","target","invertColor","findColorInvert","close","Tag","children","onClose","jsxs","rest"],"mappings":"gYAOA,SAAAA,EAAAC,EAAAC,EAAA,CACE,MAAA,CAAAA,GAAAA,IAAA,QAAAD,EAAA,WAAAA,EAAAC,CAAA,CACF,CAEA,MAAAC,EAAAC,EAAA,CAAA,0BAAA,4LAAA,EAAAC,CAAA,EAwBAC,EAAAC,EAAA,IAAA,WAAA,CAA0B,YAAA,eAAA,YAAA,cAAA,CAAA,EAAA,CAAA,wKAAA,uBAAA,4CAAA,4CAAA,+BAAA,KAAA,EAAA,EAAA,CAAA,CASN,MAAAN,EAAEA,MAAAA,CAAa,IAAAO,EAAA,QAAAP,EAAA,OAAA,CAAA,CAG9B,MAAAC,EAAEA,MAAAA,CAAa,IAAA,CAChB,MAAAO,EAAAT,EAAAC,EAAAC,CAAA,EACAQ,EAAAC,EAAAV,EAAAQ,CAAA,EAEA,OAAAL,EAAA,CAAA,SAAA,qBAAA,iBAAA,IAAA,EAAAM,EAAAD,EAAAC,CAAA,CAQF,EAAAL,EAAA,CAAA,CAQ8B,MAAAJ,EAAEA,MAAAA,CAAa,IAAAO,EAAA,QAAAP,EAAA,OAAA,CAAA,CACZ,MAAAA,EAAEA,MAAAA,CAAa,IAAAO,EAAA,QAAAP,EAAA,OAAA,CAAA,CAG7C,MAAAW,CAAQ,IAAAA,EAAAT,EAAA,MAAA,EAgBb,SAAAU,EAAA,CAA4B,SAAAC,EAAEA,QAAAA,EAAUC,GAAAA,CAAwB,EAAA,CAC9D,OAAAC,EAAA,KAAAV,EAAA,CAAA,MAAA,CAAA,CAAAS,EAAA,GAAAE,EAAA,SAAA,CAEKH,EAAAA,GAAAA,EAAAA,IAAAA,EAAAA,CAAAA,QAAAA,EAAAA,KAAAA,GAAAA,SAAAA,EAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACwD,CAAA,CAAA,CAG/D;;;;;;;;;;;;;"}